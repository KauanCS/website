{"version":3,"sources":["Images/background.png","Components/styles.js","Pages/Home/styles.js","Pages/Home/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","FontConfig","styled","p","Container","div","Background","img","ContainerText","TextName","FirstDescription","SecondaryDescription","Home","src","background","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,wC,uQCEpC,IAAMC,EAAaC,IAAOC,EAAV,K,q/BCChB,IAAMC,EAAYF,IAAOG,IAAV,KAQTC,EAAaJ,IAAOK,IAAV,KAOVC,EAAgBN,IAAOG,IAAV,KAebI,EAAWP,YAAOD,EAAPC,CAAH,KAMRQ,EAAmBR,YAAOD,EAAPC,CAAH,KAMhBS,EAAuBT,YAAOD,EAAPC,CAAH,K,iBCnBlBU,EAdF,WAEX,OACE,kBAACR,EAAD,KACE,kBAACE,EAAD,CAAYO,IAAKC,MACjB,kBAACN,EAAD,KACE,kBAACC,EAAD,KALc,eAMd,kBAACC,EAAD,2BACA,kBAACC,EAAD,uCCROI,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6e8e6b35.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.70e83c4a.png\";","import styled from 'styled-components';\r\n\r\nexport const FontConfig = styled.p`\r\n  font-family: roboto;\r\n  margin: 0;\r\n`;\r\n","import styled from 'styled-components';\nimport { FontConfig } from '../../Components/styles';\n\nexport const Container = styled.div`\n  position: fixed;\n  height: 100vh;\n  width: 100%;\n  display: flex;\n  align-items: center;\n`;\n\nexport const Background = styled.img`\n  width: 100%;\n  height: auto;\n  position: fixed;\n  z-index: 1;\n`;\n\nexport const ContainerText = styled.div`\n  display: flex;\n  position: relative;\n  z-index: 2;\n  flex-direction: column;\n  width: 400px;\n  height: 400px;\n  align-items: center;\n  justify-content: center;\n  padding: 10px;\n  margin: 100px;\n  background-color: rgba(0,0,0,0.4);\n  border-radius: 16px\n`;\n\nexport const TextName = styled(FontConfig)`\n  color: white;\n  font-size: 3em;\n  margin-bottom: 20px;\n`;\n\nexport const FirstDescription = styled(FontConfig)`\n  color: white;\n  font-size: 3em;\n  text-align: center;\n`;\n\nexport const SecondaryDescription = styled(FontConfig)`\n  color: white;\n  font-size: 12px;\n`;\n","import React from 'react';\r\nimport {\r\n  Background,\r\n  FirstDescription,\r\n  SecondaryDescription,\r\n  Container,\r\n  ContainerText,\r\n  TextName,\r\n} from './styles';\r\n\r\nimport background from '../../Images/background.png';\r\n\r\nconst Home = () => {\r\n  const VARIAVEEEEL = '<KauanCS />';\r\n  return (\r\n    <Container>\r\n      <Background src={background} />\r\n      <ContainerText>\r\n        <TextName>{VARIAVEEEEL}</TextName>\r\n        <FirstDescription>Just another coder</FirstDescription>\r\n        <SecondaryDescription>and maybe a react developer</SecondaryDescription>\r\n      </ContainerText>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\n\nimport Home from './Pages/Home';\n\nfunction App() {\n  return (\n    <div>\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}